name: Build iOS App

on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install dependencies
      - name: Install dependencies
        run: npm install

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.P12_FILE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # Build the React app
      - name: Build React app
        run: npm run build

      - name: Capacitor update
        run: npx cap update

      - name: Capacitor copy
        run: npx cap copy

      # Install CocoaPods dependencies
      - name: Install CocoaPods
        run: |
          cd ios/App
          pod install
          
      # Build the iOS app
      - name: Build iOS app
        run: |
          xcodebuild -workspace ios/App/App.xcworkspace \
                     -scheme App \
                     -sdk iphoneos \
                     -configuration Release \
                     archive \
                     -archivePath ios/App/build/App.xcarchive \
                     DEVELOPMENT_TEAM=${{ secrets.APPLE_TEAM_ID }} \
                     -allowProvisioningUpdates
        env:
          DEVELOPMENT_TEAM: ${{ secrets.APPLE_TEAM_ID }}

      # Export the IPA file
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
                     -archivePath ios/App/build/App.xcarchive \
                     -exportOptionsPlist ios/App/exportOptions.plist \
                     -exportPath ios/App/build \
                     DEVELOPMENT_TEAM=${{ secrets.APPLE_TEAM_ID }} \
                     -allowProvisioningUpdates
        env:
          DEVELOPMENT_TEAM: ${{ secrets.APPLE_TEAM_ID }}

      # Upload the IPA as an artifact
      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: ios-app

      - name: 'Upload app to TestFlight'
        uses: apple-actions/upload-testflight-build@v1
        with: 
          app-path: 'ios/App/build/App.ipa' 
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
          path: ios/App/build/*.ipa
